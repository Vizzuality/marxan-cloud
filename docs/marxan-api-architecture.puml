@startuml "Marxan Api"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' uncomment the following line and comment the first to use locally
' !include C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS/postgresql.puml
!include DEVICONS/redis.puml
!include DEVICONS/python.puml
!include DEVICONS/react.puml
!include DEVICONS2/apache.puml

' skinparam wrapWidth 200
' skinparam maxMessageSize 200

LAYOUT_TOP_DOWN()
LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()

Person(Admin, Admin, "Marxan platform administrators")

Person(User, User, "A User")
Container(app, "Frontend App", "React / NextJs", "Main interface for the user to interact with","react")
Container(bastion, "Bastion host", "Linux / VM", "")

System_Boundary(c1, "Backend") {
  System_Boundary(c2, "API") {
    Container(api, "API Service", "Typescript, NestJS", "Main API and gateway to backend data/metadata/processing")
    System_Boundary(c3, "ETL pipelines and solver workers") {
      Container(geoprocessing, "Geoprocessing Service", "Typescript, NestJS", "Core geoprocessing service")
      System_Boundary(c4, "Geoprocessing service workers") {
        Container(shapefileProcessor, "Shapefile worker", "Shapefile processing", "Importing and exporting of shapefiles...")
        Container(marxanExec, "Marxan solver worker", "Marxan CLI", "Marxan calculations")
        Container(worker1, "ETL worker", "Isolated BullMQ job processors...", "Other data processing jobs")
        Container(worker2, "ETL worker", "In-Process BullMQ job processors...", "Other data processing jobs")
      }
    }
    ' Container(tilesService, "Tile Service", "Typescript, NestJS", "Tile processing (storage and caching via blob storage and CDN)")
    ContainerDb(redis, "Pub/Sub and async job queues", "Redis", "Pub/Sub messaging, job queues, k/v caching", "redis" )
    ContainerDb(postgresDB, "Database", "Postgres 13 + Postgis 3", "Stores user/project/scenario data", "postgresql" )
    ContainerDb(postgresGeoDB, "GeoDatabase", "Postgres 13 + Postgis 3", "Stores geo data, performs geoprocessing tasks", "postgresql" )
  }
}
Lay_R(api, geoprocessing)
Lay_L(bastion, app)
Lay_U(c1, app)

Rel(Admin, bastion, "Can access kubernetes clusters via bastion host")
Rel(bastion, c1, "Provides secure access to kubernetes clusters")

Rel(User, app, "Uses", "HTTPS")


Rel_R(app, api, "Manages project and scenario state", "async, JSON/HTTPS")
Rel_L(api, app, "Sends events to", "WebSocket")

Rel(api, postgresDB, "Reads/Writes")
Rel(api, postgresGeoDB, "Reads/Writes")

Rel(api, geoprocessing, "")
Rel(geoprocessing, postgresGeoDB, "Reads/Writes")
Rel(postgresDB, postgresGeoDB, "Reads/Writes")

Rel(geoprocessing, marxanExec, "")
Rel(geoprocessing, shapefileProcessor, "")
Rel(geoprocessing, worker1, "")
Rel(geoprocessing, worker2, "")

Rel(worker2, postgresGeoDB, "Reads/Writes")
Rel(worker1, postgresDB, "Reads/Writes")

Rel(api, redis, "Pushes jobs to queues")
Rel(geoprocessing, redis, "Fetches jobs from queues and posts progress status")

@enduml
