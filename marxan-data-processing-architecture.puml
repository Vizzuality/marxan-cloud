@startuml "Marxan Api"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' uncomment the following line and comment the first to use locally
' !include C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define DEVICONS2 https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS/postgresql.puml
!include DEVICONS/redis.puml
!include DEVICONS/python.puml
!include DEVICONS/react.puml
!include DEVICONS2/apache.puml

' skinparam wrapWidth 200
' skinparam maxMessageSize 200

' LAYOUT_TOP_DOWN()
LAYOUT_AS_SKETCH()
LAYOUT_WITH_LEGEND()
System_Ext(dataSources, "Data Sources")
System_Ext(userData, "User Data Sources")
System_Boundary(dataPipes, "Data pipes"){
  ContainerDb(dataStorage2, "GeoDatabase", "Postgres 13 + Postgis 3", "Stores user data", "postgresql")
  System_Boundary(dataPipe1, "data preprocessing for ingestion"){
    Container(rawStorage, "Raw storage", "Azure blobs, s3, gcs", "container to store the raw data")
    System_Boundary(dataValidation, "Data Validation"){
      }
    System_Boundary(dataRepair, "Data Repair"){
      }
    System_Boundary(dataTransformation, "Data Transformation"){
      }
    ' System_Boundary(dataIngesting, "Data Ingestion"){

      ' }
    }

    ' System_Boundary(dataPipe2, "data preparation"){
    ' ContainerDb(dataStorage2, "Database", "Postgres 13 + Postgis 3", "Stores user data", "postgresql")
    ' System_Boundary(dataValidation2, "Data Validation"){
    '   }
    ' System_Boundary(dataTransformation2, "Data Transformation"){
    '   }
    ' }

    System_Boundary(dataPipe3, "marxan runner"){
    ' ContainerDb(dataStorage3, "Database", "Postgres 13 + Postgis 3", "Stores user data", "postgresql")
    System_Boundary(dataValidation3, "Data Validation"){
      }
    System_Boundary(dataTransformation3, "Data Transformation"){
      }
    System_Boundary(marxanExecuter, "Executer"){
      }
    }

     System_Boundary(dataPipe4, "data postprocessing"){
    ' ContainerDb(dataStorage4, "Database", "Postgres 13 + Postgis 3", "Stores user data", "postgresql")
    System_Boundary(dataValidation4, "Data Validation"){
      }
    System_Boundary(dataTransformation4, "Data Transformation"){
      }
    }
  }




Rel(dataSources, rawStorage, "Downloads")
Rel(userData, rawStorage, "Downloads")
Rel(rawStorage, dataValidation, "Read")
' Rel(dataValidation, dataRepair, "Not Valid")
' Rel(dataRepair, dataValidation, "Read")
Rel(dataValidation, dataRepair, "Make Valid")
Rel(dataRepair, dataTransformation, "")
Rel(dataTransformation, dataStorage2,"ingestion")

Rel(dataStorage2, dataTransformation3, "Read")
Rel(dataTransformation3, dataValidation3, "Transform marxan executable project")
Rel(dataValidation3, marxanExecuter, "Execute marxan")

Rel(dataPipe3, dataPipe4, "Read")

Rel(dataTransformation4, dataValidation4, "Transform marxan executable project")
Rel( dataValidation4, dataStorage2, "Write")


' Lay_U(dataPipe2, dataPipe1)
Lay_U(dataStorage2, dataPipe1)
Lay_U(dataStorage2, dataPipe3)
Lay_U(dataPipe3, dataPipe1)
Lay_U(dataPipe3, dataPipe4)


@enduml
