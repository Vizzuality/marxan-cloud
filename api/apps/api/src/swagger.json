{
  "openapi": "3.0.0",
  "info": {
    "title": "MarxanCloud API",
    "description": "MarxanCloud is a conservation planning platform.",
    "version": "0.4.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
        }
    },
    "schemas": {
      "AdminArea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid0": {
            "type": "object"
          },
          "name0": {
            "type": "object"
          },
          "gid1": {
            "type": "object"
          },
          "name1": {
            "type": "object"
          },
          "gid2": {
            "type": "object"
          },
          "name2": {
            "type": "object"
          },
          "iso3": {
            "type": "object"
          },
          "level": {
            "type": "string"
          },
          "theGeom": {
            "type": "object"
          },
          "bbox": {
            "type": "object"
          }
        },
        "required": ["id", "level", "theGeom", "bbox"]
      },
      "JSONAPIAdminAreaData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/AdminArea"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "AdminAreaResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIAdminAreaData"
          }
        },
        "required": ["data"]
      },
      "ApiEvent": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          }
        },
        "required": ["kind", "topic"]
      },
      "JSONAPIApiEventData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/ApiEvent"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "ApiEventResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIApiEventData"
          }
        },
        "required": ["data"]
      },
      "CreateApiEventDTO": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "topic": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": ["kind", "topic"]
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid0": {
            "type": "string"
          },
          "name0": {
            "type": "string"
          },
          "theGeom": {
            "type": "object"
          },
          "bbox": {
            "type": "object"
          }
        },
        "required": ["id", "gid0", "name0", "theGeom", "bbox"]
      },
      "JSONAPICountryData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/Country"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "CountryResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPICountryData"
          }
        },
        "required": ["data"]
      },
      "GeoFeatureGeometry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "required": ["id"]
      },
      "JSONAPIGeoFeaturesGeometryData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/GeoFeatureGeometry"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "GeoFeatureResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIGeoFeaturesData"
          }
        },
        "required": ["data"]
      },
      "OrganizationResultPlural": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["data"]
      },
      "ScenarioType": {
        "type": "string",
        "enum": ["marxan", "marxan-with-zones"]
      },
      "JobStatus": {
        "type": "string",
        "enum": ["created", "running", "done", "failure"]
      },
      "Scenario": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/User"
          },
          "lastModifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ScenarioType"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "wdpaIucnCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "protectedAreaFilterByIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wdpaThreshold": {
            "type": "object"
          },
          "numberOfRuns": {
            "type": "number"
          },
          "boundaryLengthModifier": {
            "type": "number"
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "parentScenarioId": {
            "type": "string"
          },
          "parentScenario": {
            "$ref": "#/components/schemas/Scenario"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "createdAt",
          "createdByUser",
          "lastModifiedAt",
          "id",
          "name",
          "type",
          "project",
          "status",
          "users"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/User"
          },
          "lastModifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "adminAreaLevel1Id": {
            "type": "string"
          },
          "adminAreaLevel2Id": {
            "type": "string"
          },
          "planningUnitGridShape": {
            "type": "string"
          },
          "planningUnitAreakm2": {
            "type": "number"
          },
          "extent": {
            "type": "object"
          },
          "bbox": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "scenarios": {
            "$ref": "#/components/schemas/Scenario"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "planningAreaId": {
            "type": "string",
            "description": "ID of Country / Gid1 / Gid2 of project's area"
          },
          "planningAreaName": {
            "type": "string",
            "description": "Display name of Country / Gid1 / Gid2 of project's area"
          }
        },
        "required": [
          "createdAt",
          "createdByUser",
          "lastModifiedAt",
          "id",
          "name",
          "organization",
          "adminAreaLevel1Id",
          "adminAreaLevel2Id",
          "planningUnitGridShape",
          "planningUnitAreakm2",
          "bbox",
          "users"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "displayName": {
            "type": "object"
          },
          "fname": {
            "type": "object"
          },
          "lname": {
            "type": "object"
          },
          "avatarDataUrl": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "isActive": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "scenarios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scenario"
            }
          }
        },
        "required": ["email", "isActive", "isDeleted", "projects", "scenarios"]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdByUser": {
            "$ref": "#/components/schemas/User"
          },
          "lastModifiedAt": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "projects": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "required": [
          "createdAt",
          "createdByUser",
          "lastModifiedAt",
          "id",
          "name"
        ]
      },
      "JSONAPIOrganizationData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/Organization"
          },
          "relationships": {
            "type": "object"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "OrganizationResultSingular": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIOrganizationData"
          }
        },
        "required": ["data"]
      },
      "CreateOrganizationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": ["name"]
      },
      "UpdateOrganizationDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "UpdateUserPasswordDTO": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        },
        "required": ["currentPassword", "newPassword"]
      },
      "JSONAPIUserData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "UserResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIUserData"
          }
        },
        "required": ["data"]
      },
      "UpdateUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "displayName": {
            "type": "object"
          },
          "fname": {
            "type": "object"
          },
          "lname": {
            "type": "object"
          },
          "password": {
            "type": "string"
          },
          "avatarDataUrl": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["username", "password"]
      },
      "SignUpDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["email", "password"]
      },
      "GeoFeature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "featureClassName": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "source": {
            "type": "string"
          },
          "alias": {
            "type": "object"
          },
          "propertyName": {
            "type": "string"
          },
          "intersection": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": ["id", "tag"]
      },
      "JSONAPIGeoFeaturesData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/GeoFeature"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "ProjectResultPlural": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["data"]
      },
      "JSONAPIProjectData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/Project"
          },
          "relationships": {
            "type": "object"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "ProjectResultSingular": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIProjectData"
          }
        },
        "required": ["data"]
      },
      "CreateProjectDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "countryId": {
            "type": "string",
            "description": "ISO 3166-1 alpha3 country code (uppercase)",
            "example": "ESP"
          },
          "adminAreaLevel1Id": {
            "type": "string"
          },
          "adminAreaLevel2Id": {
            "type": "string"
          },
          "planningUnitGridShape": {
            "type": "string"
          },
          "planningUnitAreakm2": {
            "type": "number"
          },
          "extent": {
            "type": "object",
            "description": "Geometry part of GeoJson; MultiPolygon or Polygon"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": ["name", "organizationId"]
      },
      "UpdateProjectDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "countryId": {
            "type": "string",
            "description": "ISO 3166-1 alpha3 country code (uppercase)",
            "example": "ESP"
          },
          "adminAreaLevel1Id": {
            "type": "string"
          },
          "adminAreaLevel2Id": {
            "type": "string"
          },
          "planningUnitGridShape": {
            "type": "string"
          },
          "planningUnitAreakm2": {
            "type": "number"
          },
          "extent": {
            "type": "object",
            "description": "Geometry part of GeoJson; MultiPolygon or Polygon"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "JSONAPIScenarioData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/Scenario"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "ScenarioResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIScenarioData"
          }
        },
        "required": ["data"]
      },
      "CreateScenarioDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "wdpaIucnCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customProtectedAreaIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wdpaThreshold": {
            "type": "number"
          },
          "numberOfRuns": {
            "type": "number"
          },
          "boundaryLengthModifier": {
            "type": "number"
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          }
        },
        "required": ["name", "type", "projectId", "status"]
      },
      "ShapefileGeoJSONResponseDTO": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          }
        },
        "required": ["data"]
      },
      "UpdateScenarioDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "wdpaIucnCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customProtectedAreaIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wdpaThreshold": {
            "type": "number"
          },
          "numberOfRuns": {
            "type": "number"
          },
          "boundaryLengthModifier": {
            "type": "number"
          },
          "metadata": {
            "type": "object"
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus"
          }
        }
      },
      "PlanningUnitsByIdUpdateDto": {
        "type": "object",
        "properties": {
          "include": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PlanningUnitsByGeoJsonUpdateDto": {
        "type": "object",
        "properties": {
          "include": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateScenarioPlanningUnitLockStatusDto": {
        "type": "object",
        "properties": {
          "byId": {
            "$ref": "#/components/schemas/PlanningUnitsByIdUpdateDto"
          },
          "byGeoJson": {
            "$ref": "#/components/schemas/PlanningUnitsByGeoJsonUpdateDto"
          }
        }
      },
      "RemoteScenarioFeaturesData": {
        "type": "object",
        "properties": {
          "fpf": {
            "type": "number",
            "description": "Feature Penalty Factor for this feature run."
          },
          "target": {
            "type": "number",
            "description": "Total area space, expressed in m^2"
          },
          "coverageTarget": {
            "type": "number",
            "description": "0-100 (%) value of target protection coverage of all available species."
          },
          "coverageTargetArea": {
            "type": "number",
            "description": "Equivalent of `target` percentage in covered area, expressed in m^2"
          },
          "met": {
            "type": "number",
            "description": "0-100 (%) value of how many species % is protected currently."
          },
          "metArea": {
            "type": "number",
            "description": "Equivalent of `met` percentage in covered area, expressed in m^2"
          },
          "onTarget": {
            "type": "boolean",
            "description": "Shorthand value if current `met` is good enough compared to `target`."
          },
          "tag": {
            "type": "string",
            "enum": ["bioregional", "species"]
          },
          "featureId": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "description": "Name of the feature, for example `Lion in Deserts`."
          },
          "description": {
            "type": "object",
            "description": "Description of the feature."
          }
        },
        "required": [
          "fpf",
          "target",
          "coverageTarget",
          "coverageTargetArea",
          "met",
          "metArea",
          "onTarget",
          "tag",
          "featureId"
        ]
      },
      "ProtectedArea": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "wdpaId": {
            "type": "number"
          },
          "fullName": {
            "type": "string"
          },
          "iucnCategory": {
            "type": "string"
          },
          "shapeLength": {
            "type": "number"
          },
          "shapeArea": {
            "type": "number"
          },
          "countryId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "designation": {
            "type": "string"
          },
          "theGeom": {
            "type": "object"
          }
        },
        "required": ["id", "wdpaId"]
      },
      "JSONAPIProtectedAreaData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/ProtectedArea"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "ProtectedAreaResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIProtectedAreaData"
          }
        },
        "required": ["data"]
      },
      "IUCNProtectedAreaCategoryDTO": {
        "type": "object",
        "properties": {
          "iucnCategory": {
            "type": "string"
          }
        }
      },
      "JSONAPIIUCNProtectedAreaCategoryData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "$ref": "#/components/schemas/IUCNProtectedAreaCategoryDTO"
          }
        },
        "required": ["type", "id", "attributes"]
      },
      "IUCNProtectedAreaCategoryResult": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JSONAPIIUCNProtectedAreaCategoryData"
          }
        },
        "required": ["data"]
      }
    }
  },
  "paths": {
    "/ping": {
      "get": {
        "operationId": "PingController_ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/countries/{countryId}/administrative-areas": {
      "get": {
        "operationId": "AdminAreasController_findAllAdminAreasInGivenCountry",
        "summary": "",
        "description": "Find administrative areas within a given country.",
        "parameters": [
          {
            "name": "countryId",
            "required": true,
            "in": "path",
            "description": "Parent country of administrative areas",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "required": false,
            "in": "query",
            "description": "Whether to filter for areas of a specific level (1 or 2). By default areas of both level 1 and level 2 areas may be included in the response, if present in the search results.",
            "example": "2",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAreaResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["AdminArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/administrative-areas/{level}/preview/tiles/{z}/{x}/{y}.mvt": {
      "get": {
        "operationId": "AdminAreasController_proxyAdminAreaTile",
        "summary": "",
        "description": "Find administrative areas within a given country in mvt format.",
        "parameters": [
          {
            "name": "bbox",
            "required": false,
            "in": "query",
            "description": "Bounding box of the project [xMin, xMax, yMin, yMax]",
            "example": [-1, 40, 1, 42],
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "guid",
            "required": false,
            "in": "query",
            "description": "Parent country of administrative areas in ISO code",
            "example": "BRA.1_1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "level",
            "required": true,
            "in": "path",
            "description": "Specific level to filter the administrative areas (0, 1 or 2)",
            "example": "1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "y",
            "required": true,
            "in": "path",
            "description": "The tile y offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x",
            "required": true,
            "in": "path",
            "description": "The tile x offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "z",
            "required": true,
            "in": "path",
            "description": "The zoom level ranging from 0 - 20",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["AdminArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/administrative-areas/{areaId}/subdivisions": {
      "get": {
        "operationId": "AdminAreasController_findAllChildrenAdminAreas",
        "summary": "",
        "description": "Find administrative areas that are children of a given one.",
        "parameters": [
          {
            "name": "areaId",
            "required": true,
            "in": "path",
            "description": "Parent admin area (gid)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAreaResult"
                }
              }
            }
          }
        },
        "tags": ["AdminArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/administrative-areas/{areaId}": {
      "get": {
        "operationId": "AdminAreasController_findOne",
        "summary": "",
        "description": "Find administrative area by id",
        "parameters": [
          {
            "name": "areaId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminAreaResult"
                }
              }
            }
          }
        },
        "tags": ["AdminArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/api-events": {
      "get": {
        "operationId": "ApiEventsController_findAll",
        "summary": "",
        "description": "Find all API events",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEventResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["ApiEvents"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ApiEventsController_create",
        "summary": "",
        "description": "Create an API event",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApiEventDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEvent"
                }
              }
            }
          }
        },
        "tags": ["ApiEvents"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/api-events/kind/{kind}/topic/{topic}/latest": {
      "get": {
        "operationId": "ApiEventsController_findLatestEventByKindAndTopic",
        "summary": "",
        "description": "Find latest API event by kind for a given topic",
        "parameters": [
          {
            "name": "kind",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEvent"
                }
              }
            }
          }
        },
        "tags": ["ApiEvents"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/api-events/kind/{kind}/topic/{topic}": {
      "delete": {
        "operationId": "ApiEventsController_deleteEventSeriesByKindAndTopic",
        "summary": "",
        "description": "Delete API event series by kind for a given topic",
        "parameters": [
          {
            "name": "kind",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEvent"
                }
              }
            }
          }
        },
        "tags": ["ApiEvents"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/countries": {
      "get": {
        "operationId": "CountriesController_findAll",
        "summary": "",
        "description": "Find all countries",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["Country"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/countries/{id}": {
      "get": {
        "operationId": "CountriesController_findOne",
        "summary": "",
        "description": "Find country by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryResult"
                }
              }
            }
          }
        },
        "tags": ["Country"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/geo-features": {
      "get": {
        "operationId": "GeoFeaturesController_findAll",
        "summary": "",
        "description": "Find all geo features",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoFeatureResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["GeoFeature"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/geo-features/{id}/preview/tiles/{z}/{x}/{y}.mvt": {
      "get": {
        "operationId": "GeoFeaturesController_proxyFeaturesTile",
        "summary": "",
        "description": "Get tile for a feature by id.",
        "parameters": [
          {
            "name": "bbox",
            "required": false,
            "in": "query",
            "description": "Bounding box of the project [xMin, xMax, yMin, yMax]",
            "example": [-1, 40, 1, 42],
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Specific id of the feature",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y",
            "required": true,
            "in": "path",
            "description": "The tile y offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x",
            "required": true,
            "in": "path",
            "description": "The tile x offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "z",
            "required": true,
            "in": "path",
            "description": "The zoom level ranging from 0 - 20",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["GeoFeature"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/geo-features/{id}": {
      "get": {
        "operationId": "GeoFeaturesController_findOne",
        "summary": "",
        "description": "Find geo feature by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoFeatureResult"
                }
              }
            }
          }
        },
        "tags": ["GeoFeature"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/organizations": {
      "get": {
        "operationId": "OrganizationsController_findAll",
        "summary": "",
        "description": "Find all organizations",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `projects`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request. Available filters: `name`.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultPlural"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "The current user does not have suitable permissions for this request."
          }
        },
        "tags": ["Organization"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrganizationsController_create",
        "summary": "",
        "description": "Create organization",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Organization"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/organizations/{id}": {
      "get": {
        "operationId": "OrganizationsController_findOne",
        "summary": "",
        "description": "Find organization by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `projects`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Organization"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "OrganizationsController_update",
        "summary": "",
        "description": "Update organization",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Organization"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrganizationsController_delete",
        "summary": "",
        "description": "Delete organization",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Organization"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "operationId": "UsersController_findAll",
        "summary": "",
        "description": "Find all users",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `projects`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "The current user does not have suitable permissions for this request."
          }
        },
        "tags": ["User"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/me/password": {
      "patch": {
        "operationId": "UsersController_updateOwnPassword",
        "summary": "",
        "description": "Update the password of a user, if they can present the current one.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResult"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/me": {
      "patch": {
        "operationId": "UsersController_update",
        "summary": "",
        "description": "Update a user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResult"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "UsersController_userMetadata",
        "summary": "",
        "description": "Retrieve attributes of the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "The current user does not have suitable permissions for this request."
          }
        },
        "tags": ["User"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UsersController_deleteOwnUser",
        "summary": "",
        "description": "Mark user as deleted.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["User"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/auth/sign-in": {
      "post": {
        "operationId": "sign-in",
        "summary": "Sign user in",
        "description": "Sign user in, issuing a JWT token.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/auth/sign-out": {
      "post": {
        "operationId": "sign-out",
        "summary": "Sign user out",
        "description": "Sign user out of all their current sessions by invalidating all the JWT tokens issued to them",
        "parameters": [],
        "responses": {
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/auth/sign-up": {
      "post": {
        "operationId": "AuthenticationController_signUp",
        "summary": "",
        "description": "Sign up for a MarxanCloud account.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/auth/validate-account/{sub}/{validationToken}": {
      "get": {
        "operationId": "AuthenticationController_confirm",
        "summary": "",
        "description": "Confirm an activation token for a new user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/auth/refresh-token": {
      "post": {
        "operationId": "refresh-token",
        "summary": "Refresh JWT token",
        "description": "Request a fresh JWT token, given a still-valid one for the same user; no request payload is required: the user id is read from the JWT token presented.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "401": {
            "description": ""
          }
        },
        "tags": ["Authentication"]
      }
    },
    "/api/v1/projects/{projectId}/features": {
      "get": {
        "operationId": "ProjectsController_findAllGeoFeaturesForProject",
        "summary": "",
        "description": "Find all geo features",
        "parameters": [
          {
            "name": "q",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeoFeatureResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/projects/legacy": {
      "post": {
        "operationId": "ProjectsController_importLegacyProject",
        "summary": "Import a Marxan project",
        "description": "Import a Marxan project via file upload",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "operationId": "ProjectsController_findAll",
        "summary": "",
        "description": "Find all projects",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `scenarios`, `users`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request. Available filters: `name`, `organizationId`, `countryId`, `adminAreaLevel1Id`, `adminAreaLevel21Id`.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultPlural"
                }
              }
            }
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectsController_create",
        "summary": "",
        "description": "Create project",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{id}": {
      "get": {
        "operationId": "ProjectsController_findOne",
        "summary": "",
        "description": "Find project by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `scenarios`, `users`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ProjectsController_update",
        "summary": "",
        "description": "Update project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultSingular"
                }
              }
            }
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectsController_delete",
        "summary": "",
        "description": "Delete project",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{id}/protected-areas/shapefile": {
      "post": {
        "operationId": "ProjectsController_shapefileForProtectedArea",
        "summary": "",
        "description": "Upload Zip file containing .shp, .dbj, .prj and .shx files",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "Zip file containing .shp, .dbj, .prj and .shx files",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": ["Project"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios": {
      "get": {
        "operationId": "ScenariosController_findAll",
        "summary": "",
        "description": "Find all scenarios",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `project`, `users`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request. Available filters: `name`, `type`, `projectId`, `status`.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResult"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ScenariosController_create",
        "summary": "",
        "description": "Create scenario",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScenarioDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResult"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios/{id}": {
      "get": {
        "operationId": "ScenariosController_findOne",
        "summary": "",
        "description": "Find scenario by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned. Allowed values are: `project`, `users`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResult"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ScenariosController_update",
        "summary": "",
        "description": "Update scenario",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScenarioDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioResult"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ScenariosController_delete",
        "summary": "",
        "description": "Delete scenario",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios/{id}/cost-surface/shapefile": {
      "post": {
        "operationId": "ScenariosController_processCostSurfaceShapefile",
        "summary": "",
        "description": "Upload Zip file containing .shp, .dbj, .prj and .shx files",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "Zip file containing .shp, .dbj, .prj and .shx files",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios/{id}/planning-unit-shapefile": {
      "post": {
        "operationId": "ScenariosController_uploadLockInShapeFile",
        "summary": "",
        "description": "Upload Zip file containing .shp, .dbj, .prj and .shx files",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "Zip file containing .shp, .dbj, .prj and .shx files",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShapefileGeoJSONResponseDTO"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios/{id}/planning-units": {
      "patch": {
        "operationId": "ScenariosController_changePlanningUnits",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScenarioPlanningUnitLockStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ScenariosController_planningUnitsStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/scenarios/{id}/features": {
      "get": {
        "operationId": "ScenariosController_getScenarioFeatures",
        "summary": "",
        "description": "Resolve scenario's features pre-gap data.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoteScenarioFeaturesData"
                }
              }
            }
          }
        },
        "tags": ["Scenario"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/protected-areas": {
      "get": {
        "operationId": "ProtectedAreasController_findAll",
        "summary": "",
        "description": "Find all protected areas",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request. Available filters: `fullName`, `wdpaId`, `iucnCategory`, `status`, `designation`, `countryId`.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtectedAreaResult"
                }
              }
            }
          }
        },
        "tags": ["ProtectedArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/protected-areas/preview/tiles/{z}/{x}/{y}.mvt": {
      "get": {
        "operationId": "ProtectedAreasController_proxyProtectedAreaTile",
        "summary": "",
        "description": "Get tile for protected areas.",
        "parameters": [
          {
            "name": "bbox",
            "required": false,
            "in": "query",
            "description": "Bounding box of the project [xMin, xMax, yMin, yMax]",
            "example": [-1, 40, 1, 42],
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Id of WDPA area",
            "example": "e5c3b978-908c-49d3-b1e3-89727e9f999c",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y",
            "required": true,
            "in": "path",
            "description": "The tile y offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x",
            "required": true,
            "in": "path",
            "description": "The tile x offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "z",
            "required": true,
            "in": "path",
            "description": "The zoom level ranging from 0 - 20",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["ProtectedArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/protected-areas/iucn-categories": {
      "get": {
        "operationId": "ProtectedAreasController_listIUCNProtectedAreaCategories",
        "summary": "",
        "description": "Find unique IUCN categories among protected areas in a single given administrative area.",
        "parameters": [
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "An array of filters (e.g. `filter[keyA]=<value>&filter[keyB]=<value1>,<value2>...`). Allows the client to request for specific filtering criteria to be applied to the request. Semantics of each set of filter key/values and of the set of filters as a whole depend on the specific request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of fields of the primary data according to which the results should be sorted. Sort order is ascending unless the field name is prefixed with a minus (for descending order).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page[size]",
            "required": false,
            "in": "query",
            "description": "Page size for pagination. If not supplied, pagination with default page size of 25 elements will be applied.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page[number]",
            "required": false,
            "in": "query",
            "description": "Page number for pagination. If not supplied, the first page of results will be returned.",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "disablePagination",
            "required": false,
            "in": "query",
            "description": "If set to `true`, pagination will be disabled. This overrides any other pagination query parameters, if supplied.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[adminAreaId]",
            "required": true,
            "in": "query",
            "description": "Only protected areas within the given admin area will be considered.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IUCNProtectedAreaCategoryResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["ProtectedArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/protected-areas/{id}": {
      "get": {
        "operationId": "ProtectedAreasController_findOne",
        "summary": "",
        "description": "Get protected area by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "A comma-separated list of relationship paths. Allows the client to customize which related resources should be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of the fields to be returned. An empty value indicates that all fields will be returned (less any fields specified as `omitFields`).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "omitFields",
            "required": false,
            "in": "query",
            "description": "A comma-separated list that refers to the name(s) of fields to be omitted from the results. This could be useful as a shortcut when a specific field such as large geometry fields should be omitted, but it is not practical or not desirable to explicitly whitelist fields individually. An empty value indicates that no fields will be omitted (although they may still not be present in the result if an explicit choice of fields was provided via `fields`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtectedAreaResult"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["ProtectedArea"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/planning-units/preview/regular/{planningUnitGridShape}/{planningUnitAreakm2}/tiles/{z}/{x}/{y}.mvt": {
      "get": {
        "operationId": "PlanningUnitsController_proxyProtectedAreasTile",
        "summary": "",
        "description": "Get planning unit geometries.",
        "parameters": [
          {
            "name": "bbox",
            "required": false,
            "in": "query",
            "description": "Bounding box of the project [xMin, xMax, yMin, yMax]",
            "example": [-1, 40, 1, 42],
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          {
            "name": "planningUnitAreakm2",
            "required": true,
            "in": "path",
            "description": "Planning unit area in km2",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "planningUnitGridShape",
            "required": true,
            "in": "path",
            "description": "Planning unit grid shape",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "y",
            "required": true,
            "in": "path",
            "description": "The tile y offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x",
            "required": true,
            "in": "path",
            "description": "The tile x offset on Mercator Projection",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "z",
            "required": true,
            "in": "path",
            "description": "The zoom level ranging from 0 - 20",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Binary tile succesful retrieve",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": ["Plannig units"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  }
}
