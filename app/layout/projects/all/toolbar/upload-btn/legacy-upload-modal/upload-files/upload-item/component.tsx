import React, { useCallback, useState } from 'react';

import { useDropzone, DropzoneProps } from 'react-dropzone';
import { useSelector } from 'react-redux';

import cx from 'classnames';

import { motion } from 'framer-motion';

import { useUploadLegacyProjectFile, useCancelUploadLegacyProjectFile } from 'hooks/projects';
import { useToasts } from 'hooks/toast';

import Label from 'components/forms/label';
import Icon from 'components/icon';
import InfoButton from 'components/info-button';
import { bytesToMegabytes } from 'utils/units';

import CLOSE_SVG from 'svgs/ui/close.svg?sprite';

export interface UploadItemProps {
  f: {
    label: string;
    maxSize: number;
    format: string;
    fileType: string;
    optional: boolean;
  };
  input?: any;
  meta: {
    error?: boolean;
    touched?: boolean;
  };
}

export const UploadItem: React.FC<UploadItemProps> = ({ f, input, ...fprops }: UploadItemProps) => {
  const [successFile, setSuccessFile] = useState(null);
  const [dataFileId, setDataFileId] = useState(null);

  const { addToast } = useToasts();

  const { legacyProjectId } = useSelector((state) => state['/projects/new']);

  const uploadLegacyProjectFileMutation = useUploadLegacyProjectFile({});
  const cancelUploadLegacyProjectFileMutation = useCancelUploadLegacyProjectFile({});

  // ADD DATA FILE
  const onDropAccepted = (acceptedFiles: Parameters<DropzoneProps['onDropAccepted']>[0]) => {
    const fl = acceptedFiles[0];

    setSuccessFile(fl);
    input.onChange(fl);

    const data = new FormData();
    data.append('fileType', `${f.fileType}.${f.format}`);
    data.append('file', fl);

    uploadLegacyProjectFileMutation.mutate(
      { data, projectId: legacyProjectId },
      {
        onSuccess: ({ data: { fileId } }) => {
          setDataFileId(fileId);
        },
        onError: ({ response }) => {
          const { errors } = response.data;

          addToast(
            'error-upload-legacy-data-file',
            <>
              <h2 className="font-medium">Error!</h2>
              <ul className="text-sm">
                {errors.map((e) => (
                  <li key={`${e.status}`}>{e.title}</li>
                ))}
              </ul>
            </>,
            {
              level: 'error',
            }
          );
        },
      }
    );
  };

  const onDropRejected = (rejectedFiles: Parameters<DropzoneProps['onDropRejected']>[0]) => {
    const r = rejectedFiles[0];

    // `file-too-large` backend error message is not friendly.
    // It'll display the max size in bytes which the average user may not understand.
    const errors = r.errors.map((error) => {
      // TODO: Read mazSize per each field
      return error.code === 'file-too-large'
        ? { ...error, message: `File is larger than ${bytesToMegabytes(f.maxSize)} MB` }
        : error;
    });

    addToast(
      'drop-error',
      <>
        <h2 className="font-medium">Error!</h2>
        <ul className="text-sm">
          {errors.map((e) => (
            <li key={`${e.code}`}>{e.message}</li>
          ))}
        </ul>
      </>,
      {
        level: 'error',
      }
    );
  };

  const onUploadRemove = useCallback(() => {
    cancelUploadLegacyProjectFileMutation.mutate(
      { projectId: legacyProjectId, dataFileId },
      {
        onSuccess: ({ data: { projectId } }) => {
          setSuccessFile(null);
          input.onChange(null);
          console.info('Upload legacy project data file has been canceled', projectId);
        },
        onError: () => {
          console.error('Upload legacy project data file has not been canceled');
        },
      }
    );
  }, [input, cancelUploadLegacyProjectFileMutation, dataFileId, legacyProjectId]);

  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({
    multiple: false,
    maxSize: f.maxSize,
    onDropAccepted,
    onDropRejected,
  });

  return (
    <form onSubmit={() => {}}>
      {!successFile && (
        <div className="space-y-2.5">
          <Label theme="light" className="flex space-x-2.5 uppercase" id={`${f.fileType}`}>
            {`Upload your ${f.label}`}{' '}
            <span className="lowercase">{`(${f.fileType}.${f.format})`}</span>{' '}
            {`${f.optional ? '(optional)' : ''}`}
            {f.fileType === 'output' && (
              <InfoButton size="s" theme="secondary">
                <p className="text-xs">
                  This .zip file must include the full content of an output folder from a Marxan
                  run. All the files generated by the Marxan solver must be included directly in the
                  zip file, not within any folder.
                </p>
              </InfoButton>
            )}
          </Label>
          <div
            {...fprops}
            {...getRootProps()}
            className={cx({
              'relative w-full cursor-pointer border border-dotted border-gray-400 bg-gray-200 bg-opacity-20 py-10 hover:bg-gray-200':
                true,
              'bg-gray-600': isDragActive,
              'border-green-800': isDragAccept,
              'border-red-800': isDragReject || (fprops?.meta?.error && fprops?.meta?.touched),
            })}
          >
            <input {...getInputProps()} />

            <p className="text-center text-sm text-gray-600">
              {`Drag and drop your project ${f.format}`}
              <br />
              or <b>click here</b> to upload
            </p>

            <p className="mt-2 text-center text-xxs text-gray-100">{`Recommended file size < ${bytesToMegabytes(
              f.maxSize
            )} MB`}</p>
          </div>
        </div>
      )}

      {successFile && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>
          <div className="flex w-full cursor-pointer flex-col space-y-3">
            <h5 className="text-xs uppercase text-black">Uploaded {f.label}</h5>
            <div className="flex items-center space-x-2">
              <label
                className="rounded-3xl bg-gray-100 bg-opacity-10 px-3 py-1"
                htmlFor="cancel-shapefile-btn"
              >
                <p className="text-sm text-black">{successFile.path}</p>
              </label>
              <button
                id="cancel-shapefile-btn"
                type="button"
                className="group flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full border border-black hover:bg-black"
                onClick={() => {
                  setSuccessFile(null);
                  onUploadRemove();
                }}
              >
                <Icon className="h-1.5 w-1.5 text-black group-hover:text-white" icon={CLOSE_SVG} />
              </button>
            </div>
          </div>
        </motion.div>
      )}
    </form>
  );
};

export default UploadItem;
